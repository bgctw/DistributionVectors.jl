var documenterSearchIndex = {"docs":
[{"location":"distributionvector/#Vector-of-random-variables,-i.e.-distributions","page":"Types","title":"Vector of random variables, i.e. distributions","text":"","category":"section"},{"location":"distributionvector/","page":"Types","title":"Types","text":"AbstractDistributionVector\nSimpleDistributionVector\nParamDistributionVector","category":"page"},{"location":"distributionvector/#DistributionVectors.AbstractDistributionVector","page":"Types","title":"DistributionVectors.AbstractDistributionVector","text":"AbstractDistributionVector{D <: Distribution}\n\nIs any type able represent a vector of distribution of the same type. This corresponds to a sequence of random variables, each characterized by the same type of distribution but with different parameters.  This allows aggregating functions to work, for example, computing the distribution of the sum of random variables by  sum(dv::AbstractDistributionVector).\n\nIt is parametrized by D <: Distribution defining the type of the distribution used for all the random variables.\n\nItems may be missing. Hence the element type of the iterator is  Union{Missing,D}.\n\nAbstractDistributionVector\n\nis iterable\nhas length and index access, i.e. dv[i]::D\naccess to entire parameter vectors: params(dv,Val(i))\nconversion to Tuple of Vectors: params(dv)\narray of random numbers: rand(n, dv): adding one  dimension that represents across random variables\nquery if entry is missing without needing to construct the  distribution entry: ismissing(dv,i): \n\nSpecific implementations,  need to implement at minimum methods length and getindex, and params.\n\nThere are two standard implementations:\n\nSimpleDistributionVector: fast indexing but slower params method \nParamDistributionVector: possible allocations in indexing but  faster params\n\nExamples\n\nimport LinearAlgebra: I\ndmn1 = MvNormal([0,0,0], 1 * I)\ndmn2 = MvNormal([1,1,1], 2 * I)\ndv = SimpleDistributionVector(dmn1, dmn2, missing, missing);\nsample = rand(dv,2);\n# 4 distr, each 2 samples of length 3\nsize(sample) == (3,2,4)\n\n\n\n\n\n","category":"type"},{"location":"distributionvector/#DistributionVectors.SimpleDistributionVector","page":"Types","title":"DistributionVectors.SimpleDistributionVector","text":"SimpleDistributionVector{D <: Distribution, V}\n\nIs an Vector-of-Distribution based implementation of  AbstractDistributionVector.\n\nVector of random var can be created by \n\nspecifying the distributions as arguments.\n\nd1 = LogNormal(log(110), 0.25)\nd2 = LogNormal(log(100), 0.15)\ndv = SimpleDistributionVector(d1, d2, missing);\nisequal(params(dv, Val(1)), [log(110), log(100), missing])\n\nproviding the Type of distribution and vectors of each parameter\n\nmu = [1.1,1.2,1.3]\nsigma = [1.01, 1.02, missing]\ndv = SimpleDistributionVector(LogNormal{eltype(mu)}, mu, sigma);\nisequal(params(dv, Val(1)), [1.1,1.2,missing])\n\nNote that if one of the parameters is missing, then the entire entry of the distribution is marked missing.\n\nSince Distributions are stored directly, indexing passes a reference. However, getting parameter vectors, required iterating all distributions,  and allocating a new vector.\n\n\n\n\n\n","category":"type"},{"location":"distributionvector/#DistributionVectors.ParamDistributionVector","page":"Types","title":"DistributionVectors.ParamDistributionVector","text":"ParamDistributionVector{D <: Distribution, V}\n\nIs an Tuple of Vectors based implementation of  AbstractDistributionVector.\n\nVector of random var can be created by \n\nspecifying the distributions as arguments with some overhead of converting the Distributions to vectors of each parameter\n\nd1 = LogNormal(log(110), 0.25)\nd2 = LogNormal(log(100), 0.15)\ndv = ParamDistributionVector(d1, d2, missing);\nisequal(params(dv, Val(1)), [log(110), log(100), missing])\n\nproviding the Type of distribution and vectors of each parameter\n\nmu = [1.1,1.2,1.3]\nsigma = [1.01, 1.02, missing]\ndv = ParamDistributionVector(LogNormal{eltype(mu)}, mu, sigma);\nismissing(dv[3])\nisequal(params(dv, Val(1)), [1.1,1.2,1.3]) # third still not missing here\n\nNote that if one of the parameters for entry i is missing, then dv[i] is missing.\n\nSince distributions are stored by parameter vectors, the acces to these vectors is just passing a reference. Indexing, will create Distribution types.\n\n\n\n\n\n","category":"type"},{"location":"distributionvector/#Helpers","page":"Types","title":"Helpers","text":"","category":"section"},{"location":"distributionvector/","page":"Types","title":"Types","text":"The conversion between a missing-allowed vector of parameter tuples  to a tuple of vectors for each parameter  (as used by ParamDistributionVector) is provided in a type-stable manner by function vectuptotupvec.","category":"page"},{"location":"distributionvector/","page":"Types","title":"Types","text":"vectuptotupvec","category":"page"},{"location":"distributionvector/#DistributionVectors.vectuptotupvec","page":"Types","title":"DistributionVectors.vectuptotupvec","text":"vectuptotupvec(vectup)\n\nTypesafe convert from Vector of Tuples to Tuple of Vectors.\n\nArguments\n\nvectup: A Vector of identical Tuples \n\nExamples\n\nvectup = [(1,1.01, \"string 1\"), (2,2.02, \"string 2\")] \nvectuptotupvec(vectup) == ([1, 2], [1.01, 2.02], [\"string 1\", \"string 2\"])\n\n\n\n\n\n","category":"function"},{"location":"univariate/#Univariate-distributions","page":"Overview","title":"Univariate distributions","text":"","category":"section"},{"location":"univariate/","page":"Overview","title":"Overview","text":"Sums and means of random variables are supported for distributions","category":"page"},{"location":"univariate/","page":"Overview","title":"Overview","text":"Normal\nLogNormal","category":"page"},{"location":"normal/#Sum-and-mean-of-correlated-normal-random-variables","page":"Normal","title":"Sum and mean of correlated normal random variables","text":"","category":"section"},{"location":"normal/#Dealing-with-gapfilled-records","page":"Normal","title":"Dealing with gapfilled records","text":"","category":"section"},{"location":"normal/","page":"Normal","title":"Normal","text":"Method sum for a DistributionVector{<:Normal} takes into account that some of the random variables should contribute to the overall sum and mean but should not  contribute to the reduction of relative uncertainty.  For example, some of them may have been estimated based on observed data, i.e. gapfilled.","category":"page"},{"location":"normal/","page":"Normal","title":"Normal","text":"The average (root mean squared) standard deviation of the mean of  uncorrelated normal random variables decreases with sqrtn  with number of records.","category":"page"},{"location":"normal/","page":"Normal","title":"Normal","text":"beginaligned\nm = S over n = sum_i x_i over n text with  x_i sim N(mu_i sigma_i) \n\nVar(m) = sigma^2_m = Varleft(sum_i x_i over nright) = \n  1 over n^2 Varleft( sum_i x_i right) = 1 over n^2 sum_i sigma^2_i = \n  1 over n^2 n overline sigma^2_i  = overline sigma^2_i over n \n\noperatornamese(x) = operatornamestd(m) = sigma_m = \n  sqrtoverline sigma^2_i over sqrtn = \n  operatornamermse(sigma_i)  sqrtn\nendaligned ","category":"page"},{"location":"normal/","page":"Normal","title":"Normal","text":"The sum function therefore support keyword argument isgappfilled,  which is a boolean vector of the length of the sequence of random variables. Set the positions to true for those records that should contribute to relative  uncertainty reduction. The distribution parameters are first computed first for  the records that are not gapfilled. Next scale parameter for the entire series is adjusted so that the relative error matches that of the subset of non-gapfilled variables.","category":"page"},{"location":"normal/","page":"Normal","title":"Normal","text":"In the following example ","category":"page"},{"location":"normal/","page":"Normal","title":"Normal","text":"the expected value of the mean of a series containing  gapfilled records is the same as the mean for the same series where  all records are observed. \nHowever, the relative error of the mean is  larger than the relative error of the non-gapfilled series and\nmatches the relative error of the series excluding the gapfilled records.","category":"page"},{"location":"normal/","page":"Normal","title":"Normal","text":"μ = [110,100,80,120,160.0];\nσ = [20.0,50,10,30,10];\ndv = SimpleDistributionVector(Normal{eltype(μ)}, μ, σ);\n\nacf = AutoCorrelationFunction([0.4,0.1]);\nisgapfilled = fill(false, length(dv)); isgapfilled[4:end] .= true;\n\ndsum = sum(dv, acf; isgapfilled=isgapfilled)\n\n# same mean but larger relative than with ignoring gap-filled flag:\ndsum_ig = sum(dv, acf);\nmean(dsum) == mean(dsum_ig)\nrelerr(x) = std(x)/mean(x)\nrelerr(dsum) > relerr(dsum_ig)\n# relative error is equal to the sum across true observations\ndsum_obs = sum(dv[.!isgapfilled], acf);\nmean(dsum) > mean(dsum_obs)\nrelerr(dsum) == relerr(dsum_obs)","category":"page"},{"location":"sumdist/#Aggreatation-of-random-variables","page":"Aggregation","title":"Aggreatation of random variables","text":"","category":"section"},{"location":"sumdist/#Sum-and-Mean-of-several-correlated-random-variables","page":"Aggregation","title":"Sum and Mean of several correlated random variables","text":"","category":"section"},{"location":"sumdist/","page":"Aggregation","title":"Aggregation","text":"sum(::AbstractDistributionVector)","category":"page"},{"location":"sumdist/#Base.sum-Tuple{AbstractDistributionVector}","page":"Aggregation","title":"Base.sum","text":"sum(dv::AbstractDistributionVector, ms=PassMissing(); <keyword arguments>)\nsum(dv::AbstractDistributionVector, corr, ms=PassMissing(); <keyword arguments>)\nsum(dv::AbstractDistributionVector, acf, ms=PassMissing(); <keyword arguments>)\n\nmean(dv::AbstractDistributionVector, ms=PassMissing(); <keyword arguments>)\nmean(dv::AbstractDistributionVector, corr, ms=PassMissing(); <keyword arguments>)\nmean(dv::AbstractDistributionVector, acf, ms=PassMissing(); <keyword arguments>)\n\nCompute the distribution of the sum or mean of correlated random variables.\n\nArguments\n\ndv: The vector of distributions, see AbstractDistributionVector\nms: MissingStrategy: set to SkipMissing() or ExactMissing()to    consciously care for missing values in dv.\n\nAn optional second arguments supports correlation between random variables.\n\ncorr::Symmetric: correlation matrix, or\nacf::AutoCorrelationFunction: coefficients of the   AutoCorrelationFunction\n\nKeyword arguments:\n\nisgapfilled::AbstractVector{Bool}: set to true for records that should  contribute to the sum but not to the decrease of relative uncertainty  with increasing number of records, e.g. for missing records that have  been estimated (gapfilled). \n\nThe sums of correlated variables require extra allocation and  support an additional keyword parameter  \n\nstorage: a mutable AbstractVector{eltype(D)} of length of dv  that provides storage space to avoid additional allocations.\n\nWhen implementing sum and mean for another Distribution MyDist,  the AutoCorrelationFunction-based method falls back to the Symmetric  correlation based method. Hence one only needs to define methods\n\nsum(dv::AbstractDistributionVector{<:MyDist}, \n    ms::MissingStrategy=PassMissing())\nsum(dv::AbstractDistributionVector{<:MyDist}, corr::Symmetric, \n    ms::MissingStrategy=PassMissing())\n\n\n\n\n\n","category":"method"},{"location":"sumdist/","page":"Aggregation","title":"Aggregation","text":"For examples see ","category":"page"},{"location":"sumdist/","page":"Aggregation","title":"Aggregation","text":"Sum-and-mean-of-correlated-normal-random-variables \nSum-and-mean-of-correlated-lognormal-random-variables","category":"page"},{"location":"sumdist/#Helpers","page":"Aggregation","title":"Helpers","text":"","category":"section"},{"location":"sumdist/#AutoCorrelationFunction","page":"Aggregation","title":"AutoCorrelationFunction","text":"","category":"section"},{"location":"sumdist/","page":"Aggregation","title":"Aggregation","text":"The autocorrelation function describes the correlation of random variables of a time series at increasing lags, i.e. cor(x_i+2 x_i) for lag 2. It is a Real-valued vector with the first entry the correlation at lag 0.","category":"page"},{"location":"sumdist/","page":"Aggregation","title":"Aggregation","text":"To support unambiguous dispatch on an autocorrelation function, type AutoCorrelationFunction wraps such a vector.","category":"page"},{"location":"sumdist/","page":"Aggregation","title":"Aggregation","text":"AutoCorrelationFunction","category":"page"},{"location":"sumdist/#DistributionVectors.AutoCorrelationFunction","page":"Aggregation","title":"DistributionVectors.AutoCorrelationFunction","text":"AutoCorrelationFunction{T}\n\nA representation of the autocorrelation function.\n\nIt supports accessing the coeficients starting from lag 0 by\n\ncoef(acf::AutoCorrelationFunction): implements StatsBase.coef\ncoef(acf::AutoCorrelationFunction, lag::Integer): coefficient for lag\n\nWrapping the vector of coefficients into its own type helps avoiding method ambiguities.\n\nExamples\n\nusing StatsBase: coef\nacf = AutoCorrelationFunction([1,0.4,0.1])\ncoef(acf) == [1,0.4,0.1]\ncoef(acf,1) == 0.4\n\n\n\n\n\n","category":"type"},{"location":"lognormal/#Sum-and-mean-of-correlated-lognormal-random-variables","page":"LogNormal","title":"Sum and mean of correlated lognormal random variables","text":"","category":"section"},{"location":"lognormal/","page":"LogNormal","title":"LogNormal","text":"Method sum for a DistributionVector{<:LogNormal} computes approximation of the distribution of the sum of the corresponding lognormal variables.","category":"page"},{"location":"lognormal/","page":"LogNormal","title":"LogNormal","text":"See documentation of the sum function.","category":"page"},{"location":"lognormal/","page":"LogNormal","title":"LogNormal","text":"In the following example the computed approximation is compared to a bootstrap sample of sums over three correlated random variables.","category":"page"},{"location":"lognormal/","page":"LogNormal","title":"LogNormal","text":"using Distributions,DistributionVectors\nmu = log.([110,100,80])\nsigma = log.([1.2,1.5,1.1])\nacf0 = AutoCorrelationFunction([1,0.4,0.1])\ndv = SimpleDistributionVector(LogNormal{eltype(mu)}, mu, sigma);\ndsum = sum(dv, acf0)","category":"page"},{"location":"lognormal/","page":"LogNormal","title":"LogNormal","text":"using StatsPlots,LinearAlgebra, Missings\nfunction boot_dvsums_acf(dv, acf, nboot = 10_000)\n    μ, σ = params(dv)\n    Sigma = Diagonal(σ) * cormatrix_for_acf(length(dv), acf) * Diagonal(σ);\n    dn = MvNormal(disallowmissing(μ), Symmetric(Sigma));\n    x = rand(dn, nboot) .|> exp\n    sums = vec(sum(x, dims = 1))\nend\nsums = boot_dvsums_acf(dv, acf0); \n@assert isapprox(dsum, fit(LogNormal, sums), rtol = 0.2) \np = plot(dsum, lab=\"computed\", xlabel=\"sum of 3 correlated lognormally distributed random variables\", ylabel=\"density\");\ndensity!(p, sums, lab=\"random sample\");\nvline!(p, [mean(dsum)], lab=\"mean computed\");\nvline!(p, [mean(sums)], lab=\"mean random\");\nvline!(p, quantile(dsum, [0.025, 0.975]), lab=\"cf computed\");\nvline!(p, quantile(sums, [0.025, 0.975]), lab=\"cf random\");\nplot(p)\nsavefig(\"sumlognormals.svg\"); nothing","category":"page"},{"location":"lognormal/","page":"LogNormal","title":"LogNormal","text":"(Image: plot of sum of lognormals)","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = DistributionVectors","category":"page"},{"location":"#DistributionVectors","page":"Home","title":"DistributionVectors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DistributionVectors","category":"page"},{"location":"#DistributionVectors.DistributionVectors","page":"Home","title":"DistributionVectors.DistributionVectors","text":"Support of vectors of random variables, i.e vectors of Distributions\n\n\n\n\n\n","category":"module"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"distributionvector.md\", \"sumdist.md\",\"univariate.md\",\n]\nDepth = 2","category":"page"}]
}
